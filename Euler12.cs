//Problem 12 Highly Divisible Triangular Number

//The sequence of triangle numbers is generated by adding the natural numbers.
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
//The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?
using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
//using System.Numerics;

namespace Euler
{
    class Euler12
    {

        public static ulong euler_12()
        {
            ulong tnum = 0;
            int factors = 0;
            int tri_index = 1;
            while (factors < 500)
            {
                tnum = Convert.ToUInt64 (generate_triangle(tri_index));
                factors = generate_factorsq(tnum);
                if (factors > 500)
                {
                    break;
                }
                tri_index++;
            }
            return tnum;
        }
        private static int generate_triangle(int top)
        {
            int result = 0;
            for (int i = 1; i <= top; i++)
            {
                result = result + i;
            }
            return result;
        }
        private static int generate_factors(ulong value)
        {
            int f_count = 0;
            ulong ceiling = (value / 2) + 1;
            List<ulong> list = new List<ulong>();
            for (ulong i = 1; i <= ceiling; i++)
            {
                if (value % i == 0)
                    list.Add(i);
            }
            f_count = list.Count() + 1;
            return f_count;
        }
        private static int generate_factorsq(ulong value)
        {
            int f_count = 0;
            ulong ceiling = Convert.ToUInt64(Math.Sqrt(value)); ;
            List<ulong> list = new List<ulong>();
            for (ulong i = 1; i <= ceiling; i++)
            {
                if (value % i == 0)
                    list.Add(i);
            }
            f_count = list.Count() + 1;
            if (f_count < 250)
                return f_count;
            else
            {
                ceiling = (value / 2) + 1;
                list = new List<ulong>();
                for (ulong i = 1; i <= ceiling; i++)
                {
                    if (value % i == 0)
                        list.Add(i);
                }
                f_count = list.Count() + 1;
                return f_count;
            }
        }

        private static int generate_factors(ulong value, ref List<ArrayList> factorlist)
        {
            int f_count = 0;
            ArrayList factorArray = new ArrayList();
            for (ulong i = 1; i <= value / 2 + 1; i++)
            {
                if (value % i == 0)
                    factorArray.Add(i);
            }
            f_count = factorArray.Count + 1;
            factorlist.Add(factorArray);
            return f_count;
        }

        //public static ulong euler_12x()
        //{
        //    const int UPTO = 12400;
        //    Stopwatch clock = Stopwatch.StartNew();
        //    ulong result = 0;
        //    ulong tnum = 0;
        //    int factors = 0;
        //    int highest = 0;
        //    List<ArrayList> factorlist = new List<ArrayList>();
        //    Console.WriteLine("starting");
        //    for (ulong i = 1; i < UPTO; i++)
        //    {
        //        tnum = generate_triangle(i);
        //        factors = generate_factorsq(tnum);
        //        if (factors > highest)
        //        {
        //            Console.WriteLine("Triangle number {2}, {0} has {1} factors", tnum, factors, i);
        //            highest = factors;
        //            result = tnum;
        //            if (factors > 500)
        //            {
        //                clock.Stop();
        //                Console.WriteLine("Solution took {0} ms", clock.Elapsed.TotalMilliseconds);
        //                return result;
        //            }
        //        }
        //    }
        //    Console.WriteLine("done");
        //    clock.Stop();
        //    Console.WriteLine("Solution took {0} ms, no solution", clock.Elapsed.TotalMilliseconds);
        //    for (int i = 0; i < factorlist.Count; i++)
        //    {
        //        Console.WriteLine();
        //        Console.Write("Triangle number {0}:  ", i + 1);
        //        for (int j = 0; j < factorlist[i].Count; j++)
        //        {
        //            Console.Write("{0}  ", factorlist[i][j]);
        //        }
        //    }
        //    Console.WriteLine("factorlist count: {0}", factorlist.Count);
        //    Console.WriteLine("done writing factors");
        //    return result;
        //}
    }
}
